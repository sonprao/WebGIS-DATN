// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String   @db.VarChar(32)
  role        Role    @default(USER)
  activate    Boolean @default(true)
  posts    Post[]
  profile  Profile?

  @@fulltext([email])
  @@fulltext([email, password])
}

model Profile {
  id          String  @id @default(uuid())
  sub         String  @unique
  email       String  @unique
  name        String?
  given_name  String?
  family_name String?
  picture     String  @db.LongText
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique

  @@fulltext([name, email])
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
}

model Location {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.LongText
  workspace   String

  mapLayers MapLayer[]
  view      MapView?

  @@fulltext([name])
  @@fulltext([name, description])
}

model MapView {
  id           Int         @id @default(autoincrement())
  projectionId Int?
  projection   Projection? @relation(fields: [projectionId], references: [id])
  zoom         Float       @default(10) @db.Float
  maxZoom      Float       @default(18) @db.Float
  longitude    Float       @default(0) @db.Float
  latitude     Float       @default(0) @db.Float
  extent       String      @db.LongText
  location     Location    @relation(fields: [locationId], references: [id])
  locationId   Int         @unique
}

model Projection {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  definition String    @db.LongText
  mapViews   MapView[]
}

model MapLayer {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  url         String    @db.LongText
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  Int?

  @@fulltext([name, description])
}
